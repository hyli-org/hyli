# Node identifier in the consensus. Usage subject to change in future releases.
id = "node"
# The log format to use - "json", "node" or "full" (default)
log_format = "full"
# Directory name to store node state.
data_directory = "data_node"

# Data availability module, which streams historical & new blocks.
# Public IP
da_public_address = "127.0.0.1:4141"
# Server port to listen on.
da_server_port = 4141
# Max frame size (1 gb)
da_max_frame_length = 1_000_000_000

# Rest API
run_rest_server = true
rest_server_port = 4321
rest_server_max_body_size = 10_485_760 # 10 MB

# Rest API
run_admin_server = true
admin_server_port = 4322
admin_server_max_body_size = 10_485_760 # 10 MB

# TCP API
run_tcp_server = true
tcp_server_port = 1414

# Indexer
run_indexer = true
run_explorer = true
database_url = "postgres://postgres:postgres@localhost:5432/postgres"
da_read_from = "127.0.0.1:4141"
da_timeout_client_secs = 10

[p2p]
# "FullValidator" runs a full node, "LaneManager" skips consensus, or "None" to disable most modules.
mode = "FullValidator"
# Public IP
public_address = "127.0.0.1:1231"
# TCP server for the p2p incoming connections.
server_port = 1231
# Max frame length (256 mb)
max_frame_length = 256_000_000
# Peer IPs to connect to
peers = []
# Interval the p2p layer does a ping to check aliveness of other peers.
ping_interval = 10


[consensus]
# Time to wait before producing a new block when no new transactions are received.
slot_duration = 1000
# Time to wait before sending a timeout message for the slot/view.
timeout_after = 5000
# Whether to check timestamp consistency of produced blocks
timestamp_checks = "Monotonic"
# Whether to run the single-node or full consensus
solo = true
# Timestamp of the genesis block in seconds since epoch.
genesis_timestamp = 1735689600 # Default to 2025-01-01T00:00:00Z

[genesis]
# Stakers and their inigial stake.
# Default conf has to be empty as config is additive
# but if you copy the file you can add values like (e.g.):
# stakers: { "node1"= 1000, "node2"= 1000 }
# All genesis node requires the same config here
# Keys are all nodes “id”, and values are the stake amount for each one of them.
stakers = {}
keep_tokens_in_faucet = false

[websocket]
enabled = true
server_port = 8080
ws_path = "/ws"
health_path = "/ws_health"
peer_check_interval = 100
events = ["node_state", "new_block", "new_tx"]

[indexer]
query_buffer_size = 100
